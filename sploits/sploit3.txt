The bug in target3 is an integer overflow bug.  The user is expected to provide a string argument that
includes a count of the number of widgets they want to input and then data representing those widgets.
When the count is compared to MAX_WIDGETS to determine whether or not the memcpy() occurs, it is
compared as an signed integer. The count value is multiplied by 20 and then supplied as an argument to
memcpy().  This creates an opportunity for integer overflow. This can be exploited to get
around the MAX_WIDGETS limit and overflow the buffer.
In the exploit, I set up the usual buffer overflow code-- a long series of NOPs, the shellcode, and
a pointer back into the NOPs region.  However, at the beginning  the count value is added as well.
The buffer is of size 161*20 (3220), so it will overflow the target buffer enough to overwrite the EIP.
The count is the key to this exploit.  I chose to use the value 2147483889.  When the target program
parses this number to a signed integer, it looks like a negative number (-2147483407).
